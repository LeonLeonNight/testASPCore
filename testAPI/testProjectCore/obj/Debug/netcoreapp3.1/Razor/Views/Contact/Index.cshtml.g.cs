#pragma checksum "C:\Users\User\Desktop\test_EF_ASPNETMVC\testAPI\testProjectCore\Views\Contact\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "dce3ae1668d34bdca91dc59454d368b55ed871ea"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Contact_Index), @"mvc.1.0.view", @"/Views/Contact/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\User\Desktop\test_EF_ASPNETMVC\testAPI\testProjectCore\Views\_ViewImports.cshtml"
using testProjectCore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\User\Desktop\test_EF_ASPNETMVC\testAPI\testProjectCore\Views\_ViewImports.cshtml"
using testProjectCore.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"dce3ae1668d34bdca91dc59454d368b55ed871ea", @"/Views/Contact/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"35dcb7fd52372b02e8dc7433b96e6cbbb297897e", @"/Views/_ViewImports.cshtml")]
    public class Views_Contact_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", new global::Microsoft.AspNetCore.Html.HtmlString("contactForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "dce3ae1668d34bdca91dc59454d368b55ed871ea3921", async() => {
                WriteLiteral("\r\n    <meta charset=\"utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width\" />\r\n    <title>Список контактов</title>\r\n    <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.0/css/bootstrap.min.css\" rel=\"stylesheet\" />\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "dce3ae1668d34bdca91dc59454d368b55ed871ea5142", async() => {
                WriteLiteral("\r\n    <h2>Список контактов</h2>\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "dce3ae1668d34bdca91dc59454d368b55ed871ea5437", async() => {
                    WriteLiteral(@"
        <input type=""hidden"" name=""id"" value=""0"" />
        <div class=""form-group col-md-5"">
            <label for=""firstName"">Имя:</label>
            <input class=""form-control"" name=""firstName"" />
        </div>
        <div class=""form-group col-md-5"">
            <label for=""lastName"">Фамилия:</label>
            <input class=""form-control"" name=""lastName"" />
        </div>
        <div class=""form-group col-md-5"">
            <label for=""phoneNumber"">Номер телефона:</label>
            <input class=""form-control"" name=""phoneNumber"" />
        </div>
        <div class=""form-group col-md-5"">
            <label for=""age"">Возраст:</label>
            <input class=""form-control"" name=""age"" type=""number"" />вл
        </div>
        <div class=""panel-body"">
            <button type=""submit"" id=""submit"" class=""btn btn-primary"">Сохранить</button>
            <a id=""reset"" class=""btn btn-primary"">Сбросить</a>
        </div>
    ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <table class=""table table-condensed table-striped  col-md-6"">
        <thead><tr><th>Id</th><th>Имя</th><th>возраст</th><th></th></tr></thead>
        <tbody>
        </tbody>
    </table>
    
    <script>
        // Получение всех контактов
        async function GetContactList() {
            // отправляет запрос и получаем ответ
            const response = await fetch(""/contact"", {
                method: ""GET"",
                headers: { ""Accept"": ""application/json"" }
            });
            // если запрос прошел нормально
            if (response.ok === true) {
                // получаем данные
                const contacts = await response.json();
                let rows = document.querySelector(""tbody"");
                contacts.forEach(contact => {
                    // добавляем полученные элементы в таблицу
                    rows.append(row(contact));
                });
            }
        }
        // Получение одного пользователя
        async functio");
                WriteLiteral(@"n GetContactById(id) {
            const response = await fetch(""/contact/"" + id, {
                method: ""GET"",
                headers: { ""Accept"": ""application/json"" }
            });
            if (response.ok === true) {
                const contact = await response.json();
                const form = document.forms[""contactForm""];
                form.elements[""id""].value = contact.id;
                form.elements[""name""].value = contact.name;
                form.elements[""age""].value = contact.age;
            }
        }
        // Добавление пользователя
        async function CreateUser(contactName, userAge) {

            const response = await fetch(""api/users"", {
                method: ""POST"",
                headers: { ""Accept"": ""application/json"", ""Content-Type"": ""application/json"" },
                body: JSON.stringify({
                    name: userName,
                    age: parseInt(userAge, 10)
                })
            });
            if (response");
                WriteLiteral(@".ok === true) {
                const user = await response.json();
                reset();
                document.querySelector(""tbody"").append(row(user));
            }
        }
        // Изменение пользователя
        async function EditUser(userId, userName, userAge) {
            const response = await fetch(""api/users"", {
                method: ""PUT"",
                headers: { ""Accept"": ""application/json"", ""Content-Type"": ""application/json"" },
                body: JSON.stringify({
                    id: parseInt(userId, 10),
                    name: userName,
                    age: parseInt(userAge, 10)
                })
            });
            if (response.ok === true) {
                const user = await response.json();
                reset();
                document.querySelector(""tr[data-rowid='"" + user.id + ""']"").replaceWith(row(user));
            }
        }
        // Удаление пользователя
        async function DeleteUser(id) {
            const resp");
                WriteLiteral(@"onse = await fetch(""/api/users/"" + id, {
                method: ""DELETE"",
                headers: { ""Accept"": ""application/json"" }
            });
            if (response.ok === true) {
                const user = await response.json();
                document.querySelector(""tr[data-rowid='"" + user.id + ""']"").remove();
            }
        }

        // сброс формы
        function reset() {
            const form = document.forms[""userForm""];
            form.reset();
            form.elements[""id""].value = 0;
        }
        // создание строки для таблицы
        function row(user) {

            const tr = document.createElement(""tr"");
            tr.setAttribute(""data-rowid"", user.id);

            const idTd = document.createElement(""td"");
            idTd.append(user.id);
            tr.append(idTd);

            const nameTd = document.createElement(""td"");
            nameTd.append(user.name);
            tr.append(nameTd);

            const ageTd = document.creat");
                WriteLiteral(@"eElement(""td"");
            ageTd.append(user.age);
            tr.append(ageTd);

            const linksTd = document.createElement(""td"");

            const editLink = document.createElement(""a"");
            editLink.setAttribute(""data-id"", user.id);
            editLink.setAttribute(""style"", ""cursor:pointer;padding:15px;"");
            editLink.append(""Изменить"");
            editLink.addEventListener(""click"", e => {

                e.preventDefault();
                GetUser(user.id);
            });
            linksTd.append(editLink);

            const removeLink = document.createElement(""a"");
            removeLink.setAttribute(""data-id"", user.id);
            removeLink.setAttribute(""style"", ""cursor:pointer;padding:15px;"");
            removeLink.append(""Удалить"");
            removeLink.addEventListener(""click"", e => {

                e.preventDefault();
                DeleteUser(user.id);
            });

            linksTd.append(removeLink);
            tr.appen");
                WriteLiteral(@"dChild(linksTd);

            return tr;
        }
        // сброс значений формы
        document.getElementById(""reset"").click(function (e) {

            e.preventDefault();
            reset();
        })

        // отправка формы
        document.forms[""userForm""].addEventListener(""submit"", e => {
            e.preventDefault();
            const form = document.forms[""userForm""];
            const id = form.elements[""id""].value;
            const name = form.elements[""name""].value;
            const age = form.elements[""age""].value;
            if (id == 0)
                CreateUser(name, age);
            else
                EditUser(id, name, age);
        });

        // загрузка пользователей
        GetUsers();

    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
